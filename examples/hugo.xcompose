--
-- Greek
--

local greek = {
  a="α",A="Α",
  b="β",B="Β",
  g="γ",G="Γ",
  d="δ",D="Δ",
  e="ε",E="Ε",
  z="ζ",Z="Ζ",
  h="η",H="Η",
  j="θ",J="Θ",
  i="ι",I="Ι",
  k="κ",K="Κ",
  l="λ",L="Λ",
  m="μ",M="Μ",
  n="ν",N="Ν",
  x="ξ",X="Ξ",
  o="ο",O="Ο",
  p="π",P="Π",
  r="ρ",R="Ρ",
  s="σ",S="Σ",
  t="τ",T="Τ",
  u="υ",U="Υ",
  f="φ",F="Φ",
  q="χ",Q="Χ",
  y="ψ",Y="Ψ",
  w="ω",W="Ω",
}

for c, output in pairs(greek) do
  rule {output=output, compose_key=false, input={keysym'dead_greek', c}}
  rule {output=output, compose_key=true,  input={'g', c}}
end

--
-- Vulgar Fractions
--

rule "¼" "14"
rule "½" "12"
rule "¾" "34"


--
-- Rules
--

rule "ℂ" "C|"
rule "ℍ" "H|"
rule "ℕ" "N|"
rule "ℙ" "P|"
rule "ℚ" "Q|"
rule "ℝ" "R|"
rule "ℤ" "Z|"

rule "∏" "!PP "
rule "∐" "!PP?"
rule "∑" "!SS"
rule "⋀" "!V?"
rule "⋁" "!V "
rule "⋂" "!U?"
rule "⋃" "!U "
rule "⌈" "[-"
rule "⌉" "]-"
rule "⌊" "[_"
rule "⌋" "]_"
rule "⟦" "|["
rule "⟧" "|]"

rule "⟨" "!< "
rule "⟩" "!> "
rule "⟪" "!<<"
rule "⟫" "!>>"

rule "¬" "- "
rule "∀" "A?"
rule "∃" "E?"
rule "∄" "E/?"
rule "∧" "V?"
rule "∨" "V "

rule "⊤" "T "
rule "⊥" "T?"

rule "∩" "U?"
rule "∪" "U "

rule "∅" "O/"

rule "÷" "-:"
rule "÷" ":-"
rule "ℓ" "l "

rule "≔" ":= "
rule "≕" "=: "
rule "≜" "=^ "
rule "≝" "=d "

--
-- Binary Predicates
--

local function bin_pred(yes, no, m)
  if yes then rule(yes, m.." ") end
  if no  then rule(no,  m.."/") end
end

bin_pred("⊢", "⊬", "|-")
bin_pred("⊣", nil, "-|")
bin_pred("⊨", "⊭", "|=")
bin_pred("⊩", "⊮", "||-")
bin_pred("⊫", "⊯", "||=")
bin_pred("⊪", nil, "|||-")
bin_pred("∈", "∉", "(-")
bin_pred("∼", "≁", "~")
bin_pred("≃", "≄", "~_")
bin_pred("≃", "≄", "_~")
bin_pred("≅", "≆", "~=")
bin_pred("≅", "≆", "=~")
bin_pred("≈", "≉", "~~")
bin_pred("=", "≠", "=")
bin_pred("≡", "≢", "==")
bin_pred("≤", "≰", "=<")
bin_pred("≥", "≱", ">=")
bin_pred(nil, "≮", "<")
bin_pred(nil, "≯", ">")
bin_pred("⊂", "⊄", "(")
bin_pred("⊃", "⊅", ")")
bin_pred("⊆", "⊈", "(=")
bin_pred("⊇", "⊉", ")=")
bin_pred("⊏", nil, "[")
bin_pred("⊐", nil, "]")
bin_pred("⊑", nil, "[=")
bin_pred("⊒", nil, "]=")

--
-- Arrows
--

local function lr_arrow(arr_l, arr_r, arr_lr, m, l, r)
  l = l or ''
  r = r or ''
  if arr_l  then rule(arr_l,  "<".. m .. r .." ") end
  if arr_r  then rule(arr_r,   l .. m ..">".." ") end
  if arr_lr then rule(arr_lr, "<".. m ..">".." ") end
end

local function ud_arrow(arr_u, arr_d, m)
  if arr_u then rule(arr_u, m .."^".." ") end
  if arr_d then rule(arr_d, m .."v".." ") end
end

lr_arrow("←", "→", "↔",  "-" ); ud_arrow("↑", "↓", "|")
lr_arrow("⇐", "⇒", "⇔",  "=" ); ud_arrow("⇑", "⇓", "||")
lr_arrow("↜", "↝", "↭",  "~" )
lr_arrow("⇜", "⇝", nil,  "z" )
lr_arrow("⟵", "⟶", nil,  "--")
lr_arrow("⟸", "⟹", "⟺",  "==")
lr_arrow("↤", "↦", nil,  "-" , "|", "|")
lr_arrow("⟻", "⟼", nil,  "--", "|", "|")
lr_arrow("↩", "↪", nil,  "-" , "(", ")")


